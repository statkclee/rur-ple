<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" href="../rurple.css" type="text/css" />

<title>리보그 스스로 결정을 할 수 있다면 ...</title>
</head>
<body>
<h2 class="title">12. 리보그 스스로 결정을 할 수 있다면 ...</h2>

<p><span class="pykeyword">만약</span>, <span class=
"pykeyword"><small>만약</small></span> ...</p>

<p>잠시만요!!! 리보그는 스스로 몇 가지 결정을 할 수 있습니다. 제가 말씀을 드리지 않았나요?</p>

<!--=================================================-->
<hr class="line" />

<h3 class="section">첫 번째 결정</h3>

<p>음… 사실대로 말씀드려, 리보그가 스스로 결정을 하기 위해서 약간의 도움이 필요합니다. 리보그에게 결정할 몇 가지 선택사항을 주어야 합니다. 예를 들어, 리보그가 비퍼 옆에 있을 때, 무엇을 해야 할지에 대해서 몇 가지 선택지를 줄 수 있습니다. 예를 들어, 리보그가 아래처럼 비퍼를 집으라고 할 수 있습니다.</p>

<pre>
<span class="keyword">if</span> on_beeper():
    pick_beeper()
</pre>

<p>위의 코드 의미를 살펴봅시다.</p>

<ul>
<li>
파이썬 키워드 if 는 리보그에게 조건의 값이 참(True)이나 거짓(False)에 따라 행동을 취하게 합니다.
</li>
<li>
next_to_a_beeper()은 조건 혹은 시험으로 리보그가 비퍼 옆에 있다면 (스크린에 같은 위치에 한다면)조건은 사실이 되고 그렇지 않다면 거짓입니다.</li>
<li>
콜론(:)은 조건이 참(True)이라면 리보그가 따라야 하는 명령문 앞에 선행합니다.
</li>
<li>
조건이 참인 경우 일련의 명령문은 정의 함수의 경우와 마찬가지로 들여쓰기를 합니다.
</li>
</ul>

<p>설명이 처음 읽을 때 복잡하게 보일 수 있지만, if 문을 사용하는 것을 사실 매우 간단합니다. 간단한 예제로 사용된 if 문을 살펴보세요. 리보그가 9칸을 이동하면서, 길 중간에 있는 어떤 비퍼라도 줍는다고 가정합시다. 예를 들어, 시작 위치는 다음과 같이 보일 것입니다.</p>

<p><img alt="move_pick_start" src="../images/intro/move_pick_start.png" /></p>

<p>그리고, 최종 위치는 다음과 같을 것입니다.</p>

<p><img alt="move_pick_start" src="../images/intro/move_pick_end.png" /></p>

<p>리보그가 다음을 수행하기를 원할 것입니다.</p>

<ul>
<li>앞으로 한 칸 전진하세요.</li>
<li>비퍼가 있는지 확인하세요.</li>
<li>비퍼가 하나 있다면 줍고, 그렇지 않다면 무시하고 다음 칸으로 이동하세요.</li>
</ul>

<p>다음 명령문을 9번 반복합니다. 만약 리보그에게 비퍼가 없는데 주우라고 명령을 한다면 리보그는 불평하고 꺼집니다. 여기에 어떻게 수행하는지 코드가 있습니다.</p>

<pre>
<span class="keyword">def</span> move_and_pick():
    move()
    <span class="keyword">if</span> on_beeper():
        pick_beeper()

repeat(move_and_pick, 9)
turn_off()
</pre>

<p><b>시작해 보세요!</b></p>

<!--=====================================================-->
<hr class="line" />

<h3 class="try">다시 수확 시기</h3>

<p>다시 수확시기가 돌아왔습니다. 하지만, 이번에는 모든 당근 씨앗이 발아하지 않아서, 당근 몇 개가 정원에 비워있습니다. 정원에 있는 모든 당근 (비퍼로 표현)을 리보그가 수확하게 만드세요. 월드 파일은 harvest3.wld입니다. 지난 학습시간에 했던 마지막에서 두 번째 수확 연습문제를 살펴보세요. 여러분이 해야 할 일은 아마도 harvest_one_row() 명령 함수를 수정해서 위의 move_and_pick() 명령 함수와 비슷할 것입니다.</p>

<p><img alt="harvest start" src="../images/intro/harvest3.png" /></p>

<p>여러분이 작성한 새로운 프로그램은 전에 사용한 harvest1.wld 월드 파일에서와 마찬가지로 작동해야 합니다.</p>

<div class="lessons_nav">
<a href="11-repeat.htm"><img alt="previous" src=
"../images/previous.png" /> 다시 반복 피하기 </a> - <a href=
"../lessons_toc.htm"><img alt="home" src="../images/home.png" /></a> - <a href=
"13-else.htm">제 말을 들으세요…그렇지 않다면 <img alt="next" src=
"../images/next.png" /></a>
</div>
</body>
</html>
